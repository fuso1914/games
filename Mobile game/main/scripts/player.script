local anim = hash("wait")
local aspd = 0.5
local atk =0
local player_atatck = hash("player_atatck")
local attack_msg =  hash("attack")


function init(self)
	msg.post(".", "acquire_input_focus")
	self.attack = false
	msg.post("/ui#ui", "attack", { attack = false })
	self.auto = false
	self.damage = 0
	
	self.p = go.get_position()
	self.e = vmath.vector3(220, 490, 0)
	--print (self.p)
	self.my_groups = {hash("enemy"),hash("player")}

	
end

local function damage(self)

	if self.auto == false then 
		self.damage = self.damage + 1

		msg.post("/main_damage#damage_factory", "to_damage", { damage = self.damage })
		--print (self.damage)
	end

end

local function cancel_animation(self)
	--msg.post("/ui#ui", "attack", { attack = true })
	anim = hash("wait")
	if anim ~= self.current_anim then
		msg.post("#sprite", "play_animation", { id = anim })
		self.current_anim = anim
		msg.post("/ui#ui", "attack", { attack = false })
	end
	self.attack = false
	--print(anim)

end

function on_message(self, message_id, message, sender)
	if message_id == hash("up_aspd") then
		if aspd >= 0.01 then
			aspd = aspd * 0.98 ^ 3
		end
		
	elseif message_id == hash("attack") then
		--print(attack_msg)
		self.attack = true
		msg.post("/ui#ui", "attack", { attack = true })

		--damage(self)
		--timer.delay(aspd, false, damage)
	
	elseif message_id == hash("auto_mode") then
		if self.auto == true then
			self.auto = false
		else
			self.auto = true
		end
	end
	if message_id == hash("play_animation") then
			
			--print("wait")
	end
	if message_id == hash("animation_done") then
		msg.post("/ui#ui", "attack", { attack = false })
		cancel_animation(self)
		--print("ok")
	end
	

end


local function update_animation(self)

	if self.attack == true then


		if aspd >= 0.3 then
			anim = hash("slash_first")
			--msg.post("/ui#ui", "attack", { attack = true })
		elseif aspd < 0.3 and aspd > 0.2 then
			anim = hash("slash0")	
		elseif aspd <= 0.2 and aspd > 0.05 then
			anim = hash("slash1")
		elseif aspd <= 0.05 and aspd > 0.03 then
			anim = hash("slash2")
		elseif aspd <= 0.03 and aspd > 0.01 then
			anim = hash("slash3")
		elseif aspd <= 0.01 then
			anim = hash("slash4")
		end
		print (aspd)
		print(self.current_anim)
	end
		
	if anim ~= self.current_anim then
		msg.post("#sprite", "play_animation", { id = anim })
		self.current_anim = anim
	end
	
end


function update(self, dt)

	if self.auto == true then
		msg.post(".", "attack")
	end
	
	--print(attack)
	--print(self.attack)
	update_animation(self)

	--if self.attack == true then
	--	timer.delay(aspd, false, cancel_animation)
	--	end
	self.aspd = math.ceil(9 + (200 * (1 - aspd)))
	--print (aspd)
	msg.post("/ui#ui", "update_aspd", { aspd = self.aspd })

	--if anim ~= hash("wait") then
		--msg.post("/ui#ui", "attack", { attack = true })
	--end


	--msg.post("/enemy#enemy", "attack_e",{ } )

	--print(self.current_anim)
	
end


	
function on_input(self, action_id, action)
	--if action_id == hash("touch") and action.pressed then
		--self.attack = true
	--end
	
end