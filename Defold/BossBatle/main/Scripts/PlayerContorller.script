local gravity = -100
local jump_takeoff_speed = 900
local input_left = hash("left")
local input_right = hash("right")
local gravity = -1000
local max_speed = 450
local move_acceleration = 3500
local air_acceleration_factor = 0.8
local jump_takeoff_speed = 550


function init(self)
	msg.post(".", "acquire_input_focus")
	
	self.pos = go.get_position()
	self.velocity = vmath.vector3(0, 0, 0)
	self.ground_contact = false
	self.move_input = 0
	self.touch_jump_timer = 0
	
	self.moving = false  
	self.input = vmath.vector3()
	self.dir = vmath.vector3(0, 1, 0) 
	self.speed = 50   

		
	
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	local target_speed = self.move_input * max_speed
	local speed_diff = target_speed - self.velocity.x
	local acceleration = vmath.vector3(0, gravity, 0)

	

	if speed_diff ~= 0 then
		if speed_diff < 0 then
			acceleration.x = -move_acceleration
		else
			acceleration.x = move_acceleration
		end
	
		if not self.ground_contact then
			acceleration.x = air_acceleration_factor * acceleration.x
		end
	end

	local dv = acceleration * dt
	
	--go.set_position(go.get_position() + self.velocity * dt)

	
	--初期化
	self.correction = vmath.vector3()
	self.ground_contact = false

	
end




local function handle_geometry_contact(self, normal, distance)
	local proj = vmath.dot(self.correction, normal)
	local comp = (distance - proj) * normal

	self.correction = self.correction + comp

	go.set_position(go.get_position() + comp)

	if normal.y > 0.7 then
		self.ground_contact = true
	end
	
	proj = vmath.dot(self.velocity, normal)
	if proj < 0 then
		self.velocity = self.velocity - proj * normal
		self.velocity.x = 0
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		-- check if we received a contact point message. One message for each contact point
		if message.group == hash("ground,block") then
			handle_geometry_contact(self, message.normal, message.distance)
		end
	end
end

function on_input(self, action_id, action)
	if action_id == input_left  then
		self.move_input = -action.value
	elseif action_id == input_right then
		self.move_input = action.value
	elseif action_id == input_jump then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
			
		end
	--else self.move_input = 0
	end
	
end

local function jump(self)
	-- only allow jump from ground
	if self.ground_contact then
		-- set take-off speed
		self.velocity.y = jump_takeoff_speed
	end
end


function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
